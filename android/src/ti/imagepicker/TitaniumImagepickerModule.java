/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.imagepicker;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.TiBlob;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.provider.MediaStore;
import android.graphics.Bitmap;
import android.media.ExifInterface;

import java.util.ArrayList;
import java.util.List;
import java.io.IOException;

import com.zhihu.matisse.Matisse;

@Kroll.module(name="TitaniumImagepicker", id="ti.imagepicker")
public class TitaniumImagepickerModule extends KrollModule implements TiActivityResultHandler {
	// Standard Debugging variables
	private static final String LCAT = "TitaniumImagepickerModule";

	private KrollFunction callback;
	protected int requestCode;
	private boolean resultAsBlob;

	@Kroll.method(runOnUiThread = true)
	public void openGallery(KrollDict args) {
		callback = (KrollFunction) args.get("callback");
		
		int maxImageSelection = args.optInt(Defaults.PROPERTY_MAX_IMAGE_SELECTION, Defaults.VALUE_MAX_IMAGE_SELECTION);
		
		// returns the result as TiBlob
		resultAsBlob = args.optBoolean(Defaults.PROPERTY_RESULT_AS_BLOB, Defaults.VALUE_RESULT_AS_BLOB);

		Activity activity = TiApplication.getInstance().getCurrentActivity();
		TiActivitySupport support = (TiActivitySupport) activity;
		requestCode = support.getUniqueResultCode();		
		
		Intent matisseIntent = new Intent(activity, TiMatisseActivity.class);
		matisseIntent.putExtra(Defaults.PROPERTY_MAX_IMAGE_SELECTION, maxImageSelection);
		
		support.launchActivityForResult(matisseIntent, requestCode, this);
	}

	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	@Override
	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data) {
		if (callback == null) return;
		
		final KrollDict event = new KrollDict();

		if (thisRequestCode == requestCode && data != null) {
			event.put(Defaults.CALLBACK_PROPERTY_SUCCESS, true);
			event.put(Defaults.CALLBACK_PROPERTY_CANCEL, false);
			
			if (resultAsBlob) {
				final List<Uri> uris = Matisse.obtainResult(data);
				final ArrayList<TiBlob> blobList = new ArrayList<>();
				
				if (uris != null) {
					final int uriCount = uris.size();
					
					for (int i = 0; i < uriCount; i++) {
						TiBlob image = computeBitmap( uris.get(i) );
						if (image == null) continue;
						blobList.add(image);
					}
				}
				
				event.put(Defaults.CALLBACK_PROPERTY_IMAGES, blobList.toArray());
				
			} else {
				final List<String> paths = Matisse.obtainPathResult(data);
				
				if (paths != null) {
					event.put(Defaults.CALLBACK_PROPERTY_IMAGES, paths.toArray());
				} else {
					event.put(Defaults.CALLBACK_PROPERTY_IMAGES, new Object[0]);
				}
			}
			
		} else {
			event.put(Defaults.CALLBACK_PROPERTY_SUCCESS, false);
			event.put(Defaults.CALLBACK_PROPERTY_CANCEL, true);
			event.put(Defaults.CALLBACK_PROPERTY_IMAGES, new Object[0]);
		}
		
		callback.callAsync(getKrollObject(), event);
	}

	@TargetApi(Build.VERSION_CODES.ECLAIR)
	private TiBlob computeBitmap(Uri url) {
		try {
			ContentResolver contentResolver = TiApplication.getInstance().getContentResolver();
            Bitmap bitmap = MediaStore.Images.Media.getBitmap(contentResolver, url);
			
			TiBlob blob = TiBlob.blobFromImage(bitmap);
				
			if (bitmap != null) {
				bitmap.recycle();
				bitmap = null;
			}
			
			return blob;
			
		} catch (IOException ex) {
			Log.d(LCAT, "Cannot receive bitmap at path = " + url + " : exception = " + ex.getLocalizedMessage());
			
		} catch (OutOfMemoryError ex) {
			Log.d(LCAT, "Memory error while decoding image bitmap at path = " + url);
		}

		return null;
	}

	@Override
	public void onError(Activity activity, int requestCode, Exception e) {
		if (callback == null) return;

		KrollDict event = new KrollDict();
		event.put(Defaults.CALLBACK_PROPERTY_SUCCESS, false);
		callback.callAsync(getKrollObject(), event);
	}

	private static Bitmap rotateBitmap(Bitmap bitmap, int orientation) {
		Matrix matrix = new Matrix();
		
		switch (orientation) {
			case ExifInterface.ORIENTATION_NORMAL:
				return bitmap;
			case ExifInterface.ORIENTATION_FLIP_HORIZONTAL:
				matrix.setScale(-1, 1);
				break;
			case ExifInterface.ORIENTATION_ROTATE_180:
				matrix.setRotate(180);
				break;
			case ExifInterface.ORIENTATION_FLIP_VERTICAL:
				matrix.setRotate(180);
				matrix.postScale(-1, 1);
				break;
			case ExifInterface.ORIENTATION_TRANSPOSE:
				matrix.setRotate(90);
				matrix.postScale(-1, 1);
				break;
			case ExifInterface.ORIENTATION_ROTATE_90:
				matrix.setRotate(90);
				break;
			case ExifInterface.ORIENTATION_TRANSVERSE:
				matrix.setRotate(-90);
				matrix.postScale(-1, 1);
				break;
			case ExifInterface.ORIENTATION_ROTATE_270:
				matrix.setRotate(-90);
				break;
			default:
				return bitmap;
		}
		
		try {
			Bitmap bmRotated = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
			
			if (bitmap != null) {
				bitmap.recycle();
				bitmap = null;
			}
			
			return bmRotated;
		} catch (OutOfMemoryError e) {
			e.printStackTrace();
			return null;
		}
	}
	
}

