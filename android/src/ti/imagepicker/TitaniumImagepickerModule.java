/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.imagepicker;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.TiBlob;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.media.ExifInterface;

import java.util.ArrayList;
import java.util.List;
import java.io.IOException;

import com.zhihu.matisse.Matisse;

@Kroll.module(name="TitaniumImagepicker", id="ti.imagepicker")
public class TitaniumImagepickerModule extends KrollModule implements TiActivityResultHandler {

	private KrollFunction callback;
	protected int requestCode;
	private List<Uri> paths;

	@Kroll.method(runOnUiThread = true)
	public void openGallery(KrollDict args) {
		callback = (KrollFunction) args.get("callback");
		
		int maxImageSelection = args.optInt(Defaults.PROPERTY_MAX_IMAGE_SELECTION, Defaults.VALUE_MAX_IMAGE_SELECTION);

		Activity activity = TiApplication.getInstance().getCurrentActivity();
		TiActivitySupport support = (TiActivitySupport) activity;
		requestCode = support.getUniqueResultCode();		
		
		Intent matisseIntent = new Intent(activity, TiMatisseActivity.class);
		matisseIntent.putExtra(Defaults.PROPERTY_MAX_IMAGE_SELECTION, maxImageSelection);
		
		support.launchActivityForResult(matisseIntent, requestCode, this);
	}

	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	@Override
	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data) {
		if (callback == null) return;
		
		final KrollDict event = new KrollDict();

		if (thisRequestCode != requestCode || data == null) {
			event.put(Defaults.CALLBACK_PROPERTY_SUCCESS, false);
			event.put(Defaults.CALLBACK_PROPERTY_CANCEL, true);
			event.put(Defaults.CALLBACK_PROPERTY_IMAGES, new Object[0]);
			return;
		}

		// Handle success case
		event.put(Defaults.CALLBACK_PROPERTY_SUCCESS, true);
		event.put(Defaults.CALLBACK_PROPERTY_CANCEL, false);

		paths = Matisse.obtainResult(data);

		Uri firstResult = paths.get(0);
		event.put(Defaults.CALLBACK_PROPERTY_IMAGE, blobFromPath(firstResult));
		event.put("totalImages", paths.size());

		callback.callAsync(getKrollObject(), event);
	}

	@Override
	public void onError(Activity activity, int requestCode, Exception e) {
		if (callback == null) return;

		KrollDict event = new KrollDict();
		event.put(Defaults.CALLBACK_PROPERTY_SUCCESS, false);
		callback.callAsync(getKrollObject(), event);
	}

	@Kroll.method
	public TiBlob consumeImageAtIndex(int index) {
		if (index + 1 > paths.size()) {
			paths = null;
			return null;
		}

		return blobFromPath(paths.get(index));
	}

	private TiBlob blobFromPath(Uri path) {
		try {
			String realUrl = Utils.getFilePath(path, TiApplication.getInstance().getApplicationContext());
			ExifInterface exif= new ExifInterface(realUrl);
			int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);

			return TiBlob.blobFromImage(Utils.getFixBitMapFromFile(realUrl, orientation));
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
}

